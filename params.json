{"name":"Tutorial","tagline":"parametric.svg for dummies","body":"<a                                                           id=\"/\"></a>&nbsp;\r\n\r\nCreating a parametric SVG\r\n=========================\r\n\r\nThere are many ways to create a *parametric.svg* graphic. If youâ€™re a designer or office person, youâ€™d probably like to draw your things first and attach the parametric stuff later on. Youâ€™re in the right place â€“ read on! If youâ€™re more of a coder and want to hand-craft your SVG markup, you can skip right over to [the next section](#/online-editor).\r\n\r\nYou can make a parametric drawing in any SVG editor. Thereâ€™s a fabulous free open-source one called [Inkscape][] â€“ thatâ€™s what weâ€™ll be using in this tutorial. Head over to [download][], install and start Inkscape. Come back when itâ€™s up and running. Weâ€™ll still be here when you come!\r\n\r\n***\r\n\r\nCongratulations! Hereâ€™s what Inkscape v0.91 greets me with on a Linux machine. You probably see a similar window:\r\n\r\n![Inkscape greets you](./Readme/Inkscape greets you.png)\r\n\r\nIf youâ€™ve ever fiddled with Adobe Illustrator, Corel Draw or even Microsoft Paint, I bet you feel right at home. Creating drawings in Inkscape is really easy.\r\n\r\nOff we go then! Letâ€™s start with something simple â€“ we donâ€™t want to make our first drawing too complicated. A circle is a good start. Just make sure you hold down <kbd>CTRL</kbd> while drawing â€“ otherwise youâ€™ll end up with more of an egg shape.\r\n\r\n![Drawing a circle](./Readme/Drawing a circle.png)\r\n\r\nWell done! Our circle is a plain static SVG element. Letâ€™s make its radius parametric! Inkscape ships with an XML editor â€“ the perfect tool to get the job done. Letâ€™s select the circle and pick the tool *Edit â†’ XML Editorâ€¦* from the top menu.\r\n\r\n> ðŸ’¡\r\n>\r\n> You can add, edit and remove parametric attributes right inside Inkscape using the built-in *XML Editor*.\r\n\r\n![The XML editor](./Readme/The XML editor.png)\r\n\r\nWeâ€™re greeted by a window split in two parts. On the left side there is a tree-like structure listing all elements in our drawing. On the right there are attributes of our circle. Thatâ€™s what weâ€™re interested in!\r\n\r\nUnder the list of attributes we have two input fields â€“ one for setting the name of an attribute, the other for setting its value.\r\n\r\nRight â€“ letâ€™s get our job done. We wanted to make the radius of our circle parametric. To do that letâ€™s select the attribute `r` in the right pane â€“ and change its name to `parametric:r` in the input field below.\r\n\r\n> ðŸ’¡\r\n>\r\n> Whenever you want to make an attribute parametric, just add the namespace prefix `parametric:` to it.\r\n\r\n![A parametric attribute](./Readme/A parametric attribute.png)\r\n\r\nAdding the `parametric:` prefix will create a new attribute â€“ it wonâ€™t remove the `r` we selected before. We wouldnâ€™t want that â€“ the `r` attribute is our fallback value. It will be used by Inkscape and other SVG viewers which donâ€™t understand the *parametric.svg* format.\r\n\r\n> ðŸ’¡\r\n>\r\n> Any parametric attribute should have a static fallback â€“ an attribute without the `parametric:` prefix.\r\n\r\nWeâ€™ve just created our first parametric attribute. Our regular `r` attribute could only have a static value like `157.7027` â€“ but\r\nin our `parametric:r` we use any mathematical expression like `3 * (a + 50)` there.\r\n\r\n> ðŸ’¡\r\n>\r\n> The value of a parametric attribute can be virtually any [mathematical expression][]. It can also contain [variables][] and [strings][].\r\n\r\nNow comes the big moment. Click the button *Set* or hit <kbd>CTRL + ENTER</kbd> on your keyboard to set the attribute! Hold your breath, andâ€”\r\n\r\nnothing happened? Inkscape canâ€™t evaluate parametric attributes yet â€“ itâ€™s quite a new idea. In the next section weâ€™ll learn how to use a web app to pass variables to our parametric graphic and evaluate the attribute weâ€™ve created.\r\n\r\nIf you feel like it, you can set other parametric attributes on the circle. How about setting `parametric:style` to `concat('stroke: tomato; stroke-width: ' + string(2 * 3))`? Donâ€™t worry if you donâ€™t know exactly what it means. You can read up on our [specs][] later.\r\n\r\nThereâ€™s one more thing we need to do before we close Inkscape. The `parametric:` prefixes weâ€™ve been talking about should belong to an XML namespace. To make sure our file will open in every SVG viewer, we need to declare the namespace upfront. Click the topmost `<svg:svg>` element on the left side of the XML editor (it might as well be called `<svg>`). Then set the attribute `xmlns:parametric` to `//parametric-svg.js.org/v1` on it.\r\n\r\n> ðŸ’¡\r\n>\r\n> Remember to set the attribute `xmlns:parametric=\"//parametric-svg.js.org/v1\"` on the root `<svg>` element. This way youâ€™ll make sure your drawing opens anywhere.\r\n\r\n![The parametric namespace](./Readme/The parametric namespace.png)\r\n\r\nDouble-check you havenâ€™t made a typo in the namespace stuff. Some SVG parsers are really strict beasts â€“ a single mistyped character can confuse them so much that they can no longer open a drawing.\r\n\r\nAlright! Letâ€™s save our drawing somewhere. With all warnings out of the way we can now move on to the exciting part!\r\n\r\n[Inkscape]:                 https://inkscape.org\r\n[download]:                 https://inkscape.org/en/download/\r\n[mathematical expression]:  https://github.com/parametric-svg/spec#/syntax\r\n[variables]:                https://github.com/parametric-svg/spec#/syntax/variables\r\n[strings]:                  https://github.com/parametric-svg/spec#/syntax/strings\r\n\r\n\r\n\r\n\r\n<a                                                id=\"/online-editor\"></a>&nbsp;\r\n\r\nThe online editor\r\n-----------------\r\n\r\n*A work in progressâ€¦*\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}